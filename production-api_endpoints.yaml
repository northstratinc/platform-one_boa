AWSTemplateFormatVersion: '2010-09-09'
Description: "mobileapp : AWS Stack"

Parameters:
    app:
        Type: String
        Default: mobileapp
        Description: Application Name
    env:
        Type: String
        Description: mobileapp deployment environment
    Origin:
        Type: String
        Default: "*"
        Description: The expected web application origin
    BucketAndEndpoint:
        Type: String
        Description: The stack/MAENV name in lowercase for use with bucket name and base path mapping
    apistack:
        Type: String
        Description: Template URL for api stack
    s3deploymentstack:
        Type: String
        Description: The s3 Bucket configuration for deployment
    lambdarole:
        Type: String
        Description: Template URL for lambdarole stack
    lambdatokenauth:
        Type: String
        Description: Template URL for lambdatokenauth stack
    s3appbucket:
        Type: String
        Description: Application home on S3 for specified environment

    # Parameters for IDBroker
    idbrokerstack:
        Type: String
        Description: Template URL for ID Broker stack
    idbrokerlambda:
        Type: String
        Description: Template URL for IDBroker Lambda Functions
    s3idbrokerlambda:
        Type: String
        Description: File name for Lambda .zip
    idlambdaS3ObjVersion:
        Type: String
        Description: S3 Object Version for idlambda .zip
    passwordResetZip:
        Type: String
        Description: File name for passwordReset Lambda .zip
    passwordResetS3ObjVersion:
        Type: String
        Description: S3 Object Version for passwordReset .zip
    resendCodeZip:
        Type: String
        Description: File name for resendCode Lambda .zip
    resendCodeS3ObjVersion:
        Type: String
        Description: S3 Object Version for resendCode .zip
    refreshSessionZip:
        Type: String
        Description: File name for refreshSession Lambda .zip
    refreshSessionS3ObjVersion:
        Type: String
        Description: S3 Object Version for refreshSession .zip
    userAndGroupMgmtZip:
        Type: String
        Description: File name for the userAndGroupMgmt .zip
    userAndGroupMgmtS3ObjVersion:
        Type: String
        Description: S3 Object Version for userAndGroupMgmt .zip
    idbrokerendpoints:
        Type: String
        Description: Template URL for IDBroker Rest Endpoints

    # Parameters for Group
    groupstack:
        Type: String
        Description: Template URL for Group stack
    groupLambdaTemplate:
        Type: String
        Description: Group Lambdas template URL
    groupEndpointsTemplate:
        Type: String
        Description: Group API template URL
    s3grouplambdaZip:
        Type: String
        Description: File name for Lambda .zip
    idlambdaS3ObjVersion:
        Type: String
        Description: S3 Object Version for idlambda/group .zip
    userAndGroupMgmtZip:
        Type: String
        Description: File name for the userAndGroupMgmt .zip
    userAndGroupMgmtS3ObjVersion:
        Type: String
        Description: S3 Object Version for userAndGroupMgmt .zip

    # Parameters for User Management Stack
    userMgmtStack:
        Type: String
        Description: Template URL for User Management stack
    userMgmtEndpointsTemplate:
        Type: String
        Description: Group Lambdas template URL
    userMgmtLambdaTemplate:
        Type: String
        Description: Group API template URL
    userAndGroupMgmtZip:
        Type: String
        Description: File name for the userAndGroupMgmt .zip
    userAndGroupMgmtS3ObjVersion:
        Type: String
        Description: S3 Object Version for userAndGroupMgmt .zip

    # Parameters for Notification
    notificationstack:
        Type: String
        Description: Template URL for Notification stack
    notificationendpointsTemplate:
        Type: String
        Description: Template URL for Notification REST Endpoints
    notificationlambdaTemplate:
        Type: String
        Description: Template URL for Notification Lambda Functions
    s3notificationJavaZip:
        Type: String
        Description: File name for Lambda .zip
    notificationJavaS3ObjVersion:
        Type: String
        Description: S3 Object Version for notificationJava .zip
    s3notificationsNodeZip:
        Type: String
        Description: File name for the Node Notifications Lambda .zip
    notificationsNodeS3ObjVersion:
        Type: String
        Description: S3 Object Version for notificationsNode .zip

    # Parameters for Directory
    directorystack:
        Type: String
        Description: Template URL for Directory stack
    directoryendpointsTemplate:
        Type: String
        Description: Template URL for Directory REST Endpoints
    directorylambdaTemplate:
        Type: String
        Description: Template URL for Directory Lambda Functions
    s3directorylambdaZip:
        Type: String
        Description: File name for Lambda .zip
    directoryS3ObjVersion:
        Type: String
        Description: S3 Object Version for directory .zip

    # Parameters for Calendar
    calendarstack:
        Type: String
        Description: Template URL for Calendar stack
    calendarendpointsTemplate:
        Type: String
        Description: Template URL for Calendar REST Endpoints
    calendarlambdaTemplate:
        Type: String
        Description: Template URL for Calendar Lambda Functions
    s3calendarlambdaZip:
        Type: String
        Description: File name for Lambda .zip
    calendarS3ObjVersion:
        Type: String
        Description: S3 Object Version for calendar .zip

    # Parameters for Media
    mediastack:
        Type: String
        Description: Template URL for Calendar stack
    mediabucketPolicyTemplate:
        Type: String
        Description: Template URL for Media S3 Bucket Policy
    mediaendpointsTemplate:
        Type: String
        Description: Template URL for Calendar REST Endpoints
    medialambdaTemplate:
        Type: String
        Description: Template URL for Calendar Lambda Functions
    s3medialambdaZip:
        Type: String
        Description: File name for Lambda .zip
    mediaS3ObjVersion:
        Type: String
        Description: S3 Object Version for media .zip

    # Parameters for Weather
    weatherstack:
        Type: String
        Description: Template URL for Weather stack
    weatherendpointsTemplate:
        Type: String
        Description: Template URL for Weather REST Endpoints
    weatherlambdaTemplate:
        Type: String
        Description: Template URL for Weather Lambda Functions
    weatherlambdaZip:
        Type: String
        Description: File name for weather lambda .zip
    weatherS3ObjVersion:
        Type: String
        Description: S3 Object Version for weather .zip

Resources:
    #
    LambdaRoleStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${lambdarole}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}

    #
    LambdaTokenAuthorizerStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - LambdaRoleStack
        Properties:
            TemplateURL: !Sub ${lambdatokenauth}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                s3bucket: !Sub ${s3appbucket}
                s3idbrokerlambda: !Sub ${s3idbrokerlambda}
                idlambdaS3ObjVersion: !Sub ${idlambdaS3ObjVersion}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]

    #
    ApiStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${apistack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                LambdaExecutionRole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                LambdaTokenAuthorizerUri:
                    Fn::GetAtt: [LambdaTokenAuthorizerStack, Outputs.LambdaTokenAuthorizerUri]
                LambdaRequestAuthorizerUri:
                    Fn::GetAtt: [LambdaTokenAuthorizerStack, Outputs.LambdaRequestAuthorizerUri]

    #
    IDBrokerStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - ApiStack
        Properties:
            TemplateURL: !Sub ${idbrokerstack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                ApiGatewayRestApiId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
                ApiGatewayRootResourceId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRootResourceId]
                idbrokerendpoints: !Sub ${idbrokerendpoints}
                idbrokerlambda: !Sub ${idbrokerlambda}
                s3bucket: !Sub ${s3appbucket}
                s3idbrokerlambda: !Sub ${s3idbrokerlambda}
                idlambdaS3ObjVersion: !Sub ${idlambdaS3ObjVersion}
                passwordResetZip: !Sub ${passwordResetZip}
                passwordResetS3ObjVersion: !Sub ${passwordResetS3ObjVersion}
                resendCodeZip: !Sub ${resendCodeZip}
                resendCodeS3ObjVersion: !Sub ${resendCodeS3ObjVersion}
                refreshSessionZip: !Sub ${refreshSessionZip}
                refreshSessionS3ObjVersion: !Sub ${refreshSessionS3ObjVersion}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                idbrokerclientid:
                    Fn::ImportValue: !Sub '${app}${env}-UserPoolClientId'
                idbrokerpoolid:
                    Fn::ImportValue: !Sub '${app}${env}-UserPoolId'
                EndpointAuthorizerId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiRequestAuthorizer]
                Origin: !Sub ${Origin}

    # This is the stage that is used to deploy all APIs.
    # The IDBroker is the first API that is deployed. Moving forward, each Deployment resource, can just declare the stage name.
    ApiStage:
        Type: AWS::ApiGateway::Stage
        DependsOn:
            - ApiStack
            - IDBrokerStack
        Properties:
            StageName: !Sub ${env}
            Description:
                !Sub "${app}{env} : API Gateway Deployment"
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            RestApiId:
                Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
            DeploymentId:
                Fn::GetAtt: [IDBrokerStack, Outputs.IDBrokerDeploymentId]
            Variables:
                Stack: !Sub ${env}
            MethodSettings:
                -
                    HttpMethod: "POST"
                    ResourcePath: "/signup"
                    DataTraceEnabled: false
                    LoggingLevel: ERROR
                -
                    HttpMethod: "POST"
                    ResourcePath: "/authenticate"
                    DataTraceEnabled: false
                    LoggingLevel: ERROR
                -
                    HttpMethod: "POST"
                    ResourcePath: "/confirmReset"
                    DataTraceEnabled: false
                    LoggingLevel: ERROR
                -
                    HttpMethod: "*"
                    ResourcePath: "/*"
                    DataTraceEnabled: true
                    LoggingLevel: INFO

    # The Base Path Mapping ex. api.northstrat-app.com/devabbott
    ApiBasePathMapping:
        DependsOn:
            - ApiStage
        Type: AWS::ApiGateway::BasePathMapping
        Properties: 
            BasePath: !Sub ${BucketAndEndpoint}
                
            DomainName: 'api.northstrat-app.com'
            RestApiId:
                Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
            Stage: !Ref ApiStage

    #
    GroupStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - ApiStage
            - IDBrokerStack
        Properties:
            TemplateURL: !Sub ${groupstack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                s3bucket: !Sub ${s3appbucket}
                stagename: !Ref ApiStage
                ApiGatewayRestApiId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
                ApiGatewayRootResourceId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRootResourceId]
                EndpointAuthorizerId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiRequestAuthorizer]
                Origin: !Sub ${Origin}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                idbrokerpoolid:
                    Fn::ImportValue: !Sub '${app}${env}-UserPoolId'
                groupEndpointsTemplate: !Sub ${groupEndpointsTemplate}
                groupLambdaTemplate: !Sub ${groupLambdaTemplate}
                s3grouplambdaZip: !Sub ${s3grouplambdaZip}
                idlambdaS3ObjVersion: !Sub ${idlambdaS3ObjVersion}
                userAndGroupMgmtZip: !Sub ${userAndGroupMgmtZip}
                userAndGroupMgmtS3ObjVersion: !Sub ${userAndGroupMgmtS3ObjVersion}

    #
    UserMgmtStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - ApiStage
            - GroupStack
        Properties:
            TemplateURL: !Sub ${userMgmtStack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                s3bucket: !Sub ${s3appbucket}
                stagename: !Ref ApiStage
                ApiGatewayRestApiId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
                ApiGatewayRootResourceId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRootResourceId]
                EndpointAuthorizerId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiRequestAuthorizer]
                Origin: !Sub ${Origin}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                idbrokerpoolid:
                    Fn::ImportValue: !Sub '${app}${env}-UserPoolId'
                userMgmtEndpointsTemplate: !Sub ${userMgmtEndpointsTemplate}
                userMgmtLambdaTemplate: !Sub ${userMgmtLambdaTemplate}
                userAndGroupMgmtZip: !Sub ${userAndGroupMgmtZip}
                userAndGroupMgmtS3ObjVersion: !Sub ${userAndGroupMgmtS3ObjVersion}

    #
    NotificationStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - ApiStage
            - UserMgmtStack
        Properties:
            TemplateURL: !Sub ${notificationstack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                ApiGatewayRestApiId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
                ApiGatewayRootResourceId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRootResourceId]
                notificationendpointsTemplate: !Sub ${notificationendpointsTemplate}
                notificationlambdaTemplate: !Sub ${notificationlambdaTemplate}
                s3bucket: !Sub ${s3appbucket}
                s3notificationJavaZip: !Sub ${s3notificationJavaZip}
                notificationJavaS3ObjVersion: !Sub ${notificationJavaS3ObjVersion}
                s3notificationsNodeZip: !Sub ${s3notificationsNodeZip}
                notificationsNodeS3ObjVersion: !Sub ${notificationsNodeS3ObjVersion}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                EndpointAuthorizerId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiRequestAuthorizer]
                stagename: !Ref ApiStage
                Origin: !Sub ${Origin}

    #
    DirectoryStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - ApiStage
            - NotificationStack
        Properties:
            TemplateURL: !Sub ${directorystack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                ApiGatewayRestApiId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
                ApiGatewayRootResourceId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRootResourceId]
                directoryendpointsTemplate: !Sub ${directoryendpointsTemplate}
                directorylambdaTemplate: !Sub ${directorylambdaTemplate}
                s3bucket: !Sub ${s3appbucket}
                s3directorylambdaZip: !Sub ${s3directorylambdaZip}
                directoryS3ObjVersion: !Sub ${directoryS3ObjVersion}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                EndpointAuthorizerId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiRequestAuthorizer]
                stagename: !Ref ApiStage
                Origin: !Sub ${Origin}

    #
    CalendarStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - ApiStage
            - DirectoryStack
        Properties:
            TemplateURL: !Sub ${calendarstack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                ApiGatewayRestApiId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
                ApiGatewayRootResourceId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRootResourceId]
                calendarendpointsTemplate: !Sub ${calendarendpointsTemplate}
                calendarlambdaTemplate: !Sub ${calendarlambdaTemplate}
                s3bucket: !Sub ${s3appbucket}
                s3calendarlambdaZip: !Sub ${s3calendarlambdaZip}
                calendarS3ObjVersion: !Sub ${calendarS3ObjVersion}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                EndpointAuthorizerId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiRequestAuthorizer]
                stagename: !Ref ApiStage
                Origin: !Sub ${Origin}

    #
    MediaStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - ApiStage
            - CalendarStack
        Properties:
            TemplateURL: !Sub ${mediastack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                ApiGatewayRestApiId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
                ApiGatewayRootResourceId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRootResourceId]
                mediaendpointsTemplate: !Sub ${mediaendpointsTemplate}
                medialambdaTemplate: !Sub ${medialambdaTemplate}
                mediabucketPolicyTemplate: !Sub ${mediabucketPolicyTemplate}
                s3bucket: !Sub ${s3appbucket}
                s3medialambdaZip: !Sub ${s3medialambdaZip}
                mediaS3ObjVersion: !Sub ${mediaS3ObjVersion}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                EndpointAuthorizerId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiRequestAuthorizer]
                stagename: !Ref ApiStage
                Origin: !Sub ${Origin}
                BucketAndEndpoint: !Sub ${BucketAndEndpoint}

    #
    WeatherStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - ApiStage
            - MediaStack
        Properties:
            TemplateURL: !Sub ${weatherstack}
            Tags:
                -
                    Key: "application"
                    Value: !Sub ${app}
                -
                    Key: "environment"
                    Value: !Sub ${env}
            Parameters:
                app: !Sub ${app}
                env: !Sub ${env}
                ApiGatewayRestApiId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRestApiId]
                ApiGatewayRootResourceId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiGatewayRootResourceId]
                weatherendpointsTemplate: !Sub ${weatherendpointsTemplate}
                weatherlambdaTemplate: !Sub ${weatherlambdaTemplate}
                s3bucket: !Sub ${s3appbucket}
                weatherlambdaZip: !Sub ${weatherlambdaZip}
                weatherS3ObjVersion: !Sub ${weatherS3ObjVersion}
                iamlambdarole:
                    Fn::GetAtt: [LambdaRoleStack, Outputs.LambdaExecutionRole]
                EndpointAuthorizerId:
                    Fn::GetAtt: [ApiStack, Outputs.ApiRequestAuthorizer]
                stagename: !Ref ApiStage
                Origin: !Sub ${Origin}
